)
p1
colnames(data[, 2]) = "cons"
# Plotting
p_title1 = ggdraw() +
draw_label("Consumer "%&%c%&%": Distribution of 3-minute energy consumption readings", size = 16,
fontface = "bold")
function (..., sep = " ", collapse = NULL)
c                   = substring(id, 15,17)
# Load packages
packages  = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_getData.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%" = function(x, y) {paste(x, y, sep = "")}
# Specify path and dataset
path = "data/consumer/"
id   = "consumer-00000020"
# Load data
data = getData(path, data = "single", id = id, return = "consumption")
# Values of log-train_data to scale to 0/1-interval
data_min = min(log(data[, 2]))
data_max = max(log(data[, 2]))
# Prepare plotting
colnames(data[, 2]) = "cons"
c                   = substring(id, 15,17)
# Plotting
p_title1 = ggdraw() +
draw_label(paste0("Consumer "%&%c%&%": Distribution of 3-minute",
"energy consumption readings"),
size = 16,
fontface = "bold")
p1 = ggplot(data, aes(cons*10^-10)) +
stat_density(color = palette_light()[[1]], alpha = 0.5, fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Energy consumption in kWh") +
labs(
title = "True values",
caption = "Kernel = Epanechnikov, bandwidth = 1.71 x 10^-5"
)
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(color = palette_light()[[1]], alpha = 0.5,
fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(
title = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019"
)
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
ggplot(data, aes(cons*10^-10)) +
stat_density(color = palette_light()[[1]], alpha = 0.5, fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Energy consumption in kWh") +
labs(
title = "True values",
caption = "Kernel = Epanechnikov, bandwidth = 1.71 x 10^-5"
)
data
# Prepare plotting
colnames(data[, 2]) = "cons"
colnames(data[, 2])
# Prepare plotting
colnames(data[, 2]) = "cons"
colnames(data[, 2])
?colnames
# Prepare plotting
colnames(data[, 2]) <- "cons"
colnames(data[, 2])
# Prepare plotting
colnames(data[, 2]) <- c("cons")
colnames(data[, 2])
# Prepare plotting
rename(data, colnames(data[, 2] = cons)
# Prepare plotting
rename(data, colnames(data[, 2]) = cons)
colnames(data[, 2])
# Prepare plotting
rename(data, !!colnames(data[, 2]) = cons)
# Prepare plotting
rename(data, !!colnames(data[, 2]) := cons)
# Prepare plotting
rename(data, !!colnames(data[, 2]) := "cons")
# Prepare plotting
rename(data, !!colnames(data[, 2]) =: "cons")
# Prepare plotting
rename(data, !!colnames(data[, 2]) := cons)
names(data[, 2])
# Prepare plotting
names(data[, 2]) <- "cons"
names(data[, 2])
data.frame(c(1:100), c(100:200))
data.frame(c(1:100), c(101:200))
t <- data.frame(c(1:100), c(101:200))
colnames(t)
colnames(t[,2]) <- a
colnames(t[,2]) <- "a"
data
# Prepare plotting
names(data) = c("time", "cons")
names(data)
# Prepare plotting
names(data) = c("time", "cons")
c           = substring(id, 15,17)
# Plotting
p_title1 = ggdraw() +
draw_label(paste0("Consumer "%&%c%&%": Distribution of 3-minute",
"energy consumption readings"),
size = 16,
fontface = "bold")
p1 = ggplot(data, aes(cons*10^-10)) +
stat_density(color = palette_light()[[1]], alpha = 0.5, fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Energy consumption in kWh") +
labs(
title = "True values",
caption = "Kernel = Epanechnikov, bandwidth = 1.71 x 10^-5"
)
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(color = palette_light()[[1]], alpha = 0.5,
fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(
title = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019"
)
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
ggsave("c"%&%c%&%"_density.pdf", height = 8.267, width = 11.692)
library(tfruns)
?tuning_runs
?tuning_run
# Load packages
packages = c("keras", "tfruns")
invisible(lapply(packages, library, character.only = TRUE))
# Source user-defined functions
functions = c("FUN_getData.R", "FUN_tagDaysOff.R", "FUN_scaleData.R",
"FUN_getTargets.R", "FUN_dataGenerator.R")
invisible(lapply(functions, source))
# Specify random dataset to tune models on
# For windows
# path = "data/consumer"
# files = list.files(path, pattern = ".csv")
# id    = paste0("/", substring(sample(files, 1), 1, 17))
# For Mac
path  = "data/consumer/"
files = list.files(path, pattern = ".csv")
id    = substring(sample(files, 1), 1, 17)
# Get data
unscaled = getData(path    = path,
data   = "single",
id     = id,
return = "consumption")
# Scale data
scaled = scaleData(unscaled,
option = "log-normalize",
time.tbl = FALSE)$data
# Tag weekends and holidays
input_data = tagDaysOff(scaled)
# Get target values for supervised learning
targets =  getTargets(path, id, min = "2017-01-01 00:00",
max = "2018-01-01 00:00")
# Set parameters
lookback        = 7*24*60/3              # 7 days back as input
steps           = 5                      # every 15 mins a prediction is made
min_index_train = 1
max_index_train = 10*3360
min_index_val   = max_index_train + 1
max_index_val   = max_index_train + 10*3360
###  Start training runs  ###
# Tuning with one layer
tuning_run("training_runs_1layer.R", runs_dir = "tuning_runs/1layer",
sample = 0.2, confirm = FALSE,
flags = list(
batch_size               = c(128, 64, 32),
layer1_units             = c(128, 64, 32),
layer1_dropout           = c(0, 0.2, 0.4),
layer1_recurrent_dropout = c(0, 0.2, 0.4)
))
# Tuning with two layers
tuning_run("training_runs_2layers.R", runs_dir = "tuning_runs/2layers",
sample = 0.5, confirm = FALSE,
flags = list(
layer2_units             = c(128, 64, 32),
layer2_dropout           = c(0, 0.2, 0.4),
layer2_recurrent_dropout = c(0, 0.2, 0.4)
))
# Tuning with three layers
tuning_run("training_runs_3layers.R", runs_dir = "tuning_runs/3layers",
sample = 0.5, confirm = FALSE,
flags = list(
layer3_units             = c(128, 64, 32),
layer3_dropout           = c(0, 0.2, 0.4),
layer3_recurrent_dropout = c(0, 0.2, 0.4)
))
## end of file ##
# Tuning with one layer
tuning_run("training_runs_1layer.R", runs_dir = "tuning_runs/1layer",
sample = 0.2, confirm = FALSE,
flags = list(
batch_size               = c(32),
layer1_units             = c(128, 64, 32),
layer1_dropout           = c(0, 0.2, 0.4),
layer1_recurrent_dropout = c(0, 0.2, 0.4)
))
# Tuning with one layer
tuning_run("training_runs_1layer.R", runs_dir = "tuning_runs/1layer",
sample = 0.2, confirm = FALSE,
flags = list(
batch_size               = c(32),
layer1_units             = c(128, 64, 32),
layer1_dropout           = c(0, 0.2, 0.4),
layer1_recurrent_dropout = c(0, 0.2, 0.4)
))
max_index_train = 3*3360
min_index_val   = max_index_train + 1
max_index_val   = max_index_train + 10*3360
# Tuning with one layer
tuning_run("training_runs_1layer.R", runs_dir = "tuning_runs/1layer",
sample = 0.2, confirm = FALSE,
flags = list(
batch_size               = c(32),
layer1_units             = c(128, 64, 32),
layer1_dropout           = c(0, 0.2, 0.4),
layer1_recurrent_dropout = c(0, 0.2, 0.4)
))
# Tuning with two layers
tuning_run("training_runs_2layers.R", runs_dir = "tuning_runs/2layers",
sample = 0.5, confirm = FALSE,
flags = list(
layer2_units             = c(128, 64, 32),
layer2_dropout           = c(0, 0.2, 0.4),
layer2_recurrent_dropout = c(0, 0.2, 0.4)
))
# Tuning with two layers
tuning_run("training_runs_2layers.R", runs_dir = "tuning_runs/2layers",
sample = 0.5, confirm = FALSE,
flags = list(
layer2_units             = c(128, 64, 32),
layer2_dropout           = c(0, 0.2, 0.4),
layer2_recurrent_dropout = c(0, 0.2, 0.4)
))
# Tuning with three layers
tuning_run("training_runs_3layers.R", runs_dir = "tuning_runs/3layers",
sample = 0.5, confirm = FALSE,
flags = list(
layer3_units             = c(128, 64, 32),
layer3_dropout           = c(0, 0.2, 0.4),
layer3_recurrent_dropout = c(0, 0.2, 0.4)
))
## Plot densities of single energy time series
# Load packages
packages  = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_getData.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%" = function(x, y) {paste(x, y, sep = "")}
# Specify path and dataset
path = "data/consumer/"
id   = "consumer-00000020"
# Load data
data = getData(path, data = "single", id = id, return = "consumption")
# Values of log-train_data to scale to 0/1-interval
data_min = min(log(data[, 2]))
data_max = max(log(data[, 2]))
# Prepare plotting
names(data) = c("time", "cons")
c           = substring(id, 15,17)
# Plotting
p_title1 = ggdraw() +
draw_label(paste0("Consumer "%&%c%&%": Distribution of 3-minute",
"energy consumption readings"),
size = 16,
fontface = "bold")
p1 = ggplot(data, aes(cons*10^-10)) +
stat_density(color = palette_light()[[1]], alpha = 0.5, fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Energy consumption in kWh") +
labs(
title = "True values",
caption = "Kernel = Epanechnikov, bandwidth = 1.71 x 10^-5"
)
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(color = palette_light()[[1]], alpha = 0.5,
fill = NA,
bw = "SJ", adjust = 2, kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(
title = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019"
)
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
ggsave("graphs/c"%&%c%&%"_density.pdf", height = 8.267, width = 11.692)
## end of script##
# Load packages
packages = c("data.table",
"lubridate",
"tibbletime")
invisible(lapply(packages, library, character.only = TRUE))
?fread
# Load raw data from csv-file
raw_data      = fread(input     = dataset_id%&%".csv",
header    = T,
sep       = ',',
integer64 = "numeric")
# Function for easy string pasting
"%&%" = function(x, y) {paste(x, y, sep = "")}
# Specify dataset to load: select consumer or prosumer
dataset_id    = "consumer-00000056"
# Load raw data from csv-file
raw_data      = fread(input     = dataset_id%&%".csv",
header    = T,
sep       = ',',
integer64 = "numeric")
"Prosumer "%&%substr(id, 2, 4)
%&%": Net energy production and consumption"
# Function for easy string pasting
"%&%"     = function(x, y) {paste(x, y, sep = "")}
"Prosumer "%&%substr(id, 2, 4)
%&%": Net energy production and consumption"
"Prosumer "%&%substr(id, 2, 4)%&%
": Net energy production and consumption"
## Plot densities of single energy time series
# Load packages
packages  = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_getData.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%" = function(x, y) {paste(x, y, sep = "")}
# Specify path and dataset
path = "data/consumer/"
id   = "consumer-00000020"
# Load data
data = getData(path   = path,
data   = "single",
id     = id,
return = "consumption")
# Values of log-train_data to scale to 0/1-interval
data_min = min(log(data[, 2]))
data_max = max(log(data[, 2]))
# Prepare plotting
names(data) = c("time", "cons")
c           = substring(id, 15,17)
# Plotting
p_title1 = ggdraw() +
draw_label("Consumer "%&%c%&%": Distribution of 3-minute"%&%
"energy consumption readings",
size     = 16,
fontface = "bold")
p1 = ggplot(data, aes(cons*10^-10)) +
stat_density(bw     = "SJ",
adjust = 2,
kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Energy consumption in kWh") +
labs(title   = "True values",
caption = "Kernel = Epanechnikov, bandwidth = 1.71 x 10^-5")
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(bw     = "SJ",
adjust = 2,
kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(title   = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019")
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
ggsave("graphs/c"%&%c%&%"_density.pdf", height = 8.267, width = 11.692)
## end of script##
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(fill   = NA,
bw     = "SJ",
adjust = 2,
kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(title   = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019")
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(color  = "black",
fill   = NA,
bw     = "SJ",
adjust = 2,
kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(title   = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019")
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
## Plot densities of single energy time series
# Load packages
packages  = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_getData.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%" = function(x, y) {paste(x, y, sep = "")}
# Specify path and dataset
path = "data/consumer/"
id   = "consumer-00000020"
# Load data
data = getData(path   = path,
data   = "single",
id     = id,
return = "consumption")
# Values of log-train_data to scale to 0/1-interval
data_min = min(log(data[, 2]))
data_max = max(log(data[, 2]))
# Prepare plotting
names(data) = c("time", "cons")
c           = substring(id, 15,17)
# Plotting
p_title1 = ggdraw() +
draw_label("Consumer "%&%c%&%": Distribution of 3-minute"%&%
"energy consumption readings",
size     = 16,
fontface = "bold")
p1 = ggplot(data, aes(cons*10^-10)) +
stat_density(color  = "black",
fill   = NA,
bw     = "SJ",
adjust = 2,
kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Energy consumption in kWh") +
labs(title   = "True values",
caption = "Kernel = Epanechnikov, bandwidth = 1.71 x 10^-5")
p3 = ggplot(data, aes((log(cons)-data_min)/(data_max-data_min))) +
stat_density(color  = "black",
fill   = NA,
bw     = "SJ",
adjust = 2,
kernel = "epanechnikov") +
theme_classic(base_size = 12) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
ylab("Density") +
xlab("Log energy consumption scaled between 0 and 1") +
labs(title   = "Log values scaled between 0 and 1",
caption = "Kernel = Epanechnikov, bandwidth = 0.0019")
plot_grid(p_title1, p1, p3, ncol = 1, rel_heights = c(0.15, 1, 1))
ggsave("graphs/c"%&%c%&%"_density.pdf", height = 8.267, width = 11.692)
## end of script##
# Source user-defined functions
functions = c("FUN_getData.R",
"FUN_tagDaysOff.R",
"FUN_scaleData.R",
"FUN_getTargets.R",
"FUN_dataGenerator.R",
"FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Load packages
packages  = c("keras")
invisible(lapply(packages, library, character.only = TRUE))
# Source user-defined functions
functions = c("FUN_getData.R",
"FUN_tagDaysOff.R",
"FUN_scaleData.R",
"FUN_getTargets.R",
"FUN_dataGenerator.R",
"FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
