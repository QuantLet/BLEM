# Plot oversupply, equilibrium and weighted average prices
c = c+1
ptitle = ggdraw() +
draw_label(captions[c]%&%": Market outcomes per trading period"%&%
"with true consumption values",
size     = 16,
fontface = "bold")
p1 = data_true %>%
ggplot() +
geom_line(aes(x = time, y = oversupply)) +
geom_hline(yintercept = 0, col = "red") +
ylab("Oversupply in kWh") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p2 = data_true %>%
ggplot() +
geom_line(aes(x = time, y = eq_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("Equilibrium price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p3 = data_true %>%
ggplot() +
geom_line(aes(x = time, y = LEM_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("LEM price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
plot_grid(ptitle, p1, p2, p3, ncol = 1, rel_heights = c(0.15, 1, 1, 1))
ggsave("graphs/marketoutcome_true"%&%i%&%".pdf",
height = 8.267, width = 11.692)
## Market outcomes with predicted values ##
# Extract oversupply and prices per period
data_pred = data.frame("time"       =
seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
as.POSIXct("2018-01-01 00:00"),
by = 900)[1:8836],
"oversupply" =
map_dbl(market_outcomes_pred, "oversupply"),
"eq_price"   =
map_dbl(market_outcomes_pred, "eq_price"),
"LEM_price"  =
map_dbl(market_outcomes_pred, "LEM_price"))
# Extract supply, demand, and equilibrium prices per period
supply_predb  = map_dbl(market_outcomes_pred, "supply")
demand_pred   = map_dbl(market_outcomes_pred, "demand")
eq_price_pred = map_dbl(market_outcomes_pred, "eq_price")
# Plot oversupply, equilibrium and weighted average prices
ptitle = ggdraw() +
draw_label(captions[c],
size     = 16,
fontface = "bold")
p1 = data_pred %>%
ggplot() +
geom_line(aes(x = time, y = oversupply)) +
geom_hline(yintercept = 0, col = "red") +
ylab("Oversupply in kWh") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p2 = data_pred %>%
ggplot() +
geom_line(aes(x = time, y = eq_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("Equilibrium price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p3 = data_pred %>%
ggplot() +
geom_line(aes(x = time, y = LEM_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("LEM price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
plot_grid(ptitle, p1, p2, p3, ncol = 1, rel_heights = c(0.15, 1, 1, 1))
ggsave("graphs/marketoutcome_pred"%&%i%&%".pdf",
height = 8.267, width = 11.692)
}
# Set vector
scenarios = c("_balanced", "_oversupply", "_undersupply")
captions  = c("Balanced supply", "Oversupply", "Undersuppy")
# Index for captions
c = 0
for(i in scenarios){
# Load market outcomes
load("market_outcomes/true_outcomes"%&%i%&%".RData")
load("market_outcomes/pred_outcomes"%&%i%&%".RData")
## Market outcomes with true values ##
# Extract oversupply and prices per period
data_true = data.frame("time"       =
seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
as.POSIXct("2018-01-01 00:00"),
by = 900)[1:8836],
"oversupply" =
map_dbl(market_outcomes_true, "oversupply"),
"eq_price"   =
map_dbl(market_outcomes_true, "eq_price"),
"LEM_price"  =
map_dbl(market_outcomes_true, "LEM_price"))
# Extract supply, demand, and equilibrium prices per period
supply_true   = map_dbl(market_outcomes_true, "supply")
demand_true   = map_dbl(market_outcomes_true, "demand")
eq_price_true = map_dbl(market_outcomes_true, "eq_price")
# Plot oversupply, equilibrium and weighted average prices
c = c+1
ptitle = ggdraw() +
draw_label(captions[c]%&%": Market outcomes per trading period"%&%
"with true consumption values",
size     = 16,
fontface = "bold")
p1 = data_true %>%
ggplot() +
geom_line(aes(x = time, y = oversupply)) +
geom_hline(yintercept = 0, col = "red") +
ylab("Oversupply in kWh") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p2 = data_true %>%
ggplot() +
geom_line(aes(x = time, y = eq_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("Equilibrium price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p3 = data_true %>%
ggplot() +
geom_line(aes(x = time, y = LEM_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("LEM price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
plot_grid(ptitle, p1, p2, p3, ncol = 1, rel_heights = c(0.15, 1, 1, 1))
ggsave("graphs/marketoutcome_true"%&%i%&%".pdf",
height = 8.267, width = 11.692)
## Market outcomes with predicted values ##
# Extract oversupply and prices per period
data_pred = data.frame("time"       =
seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
as.POSIXct("2018-01-01 00:00"),
by = 900)[1:8836],
"oversupply" =
map_dbl(market_outcomes_pred, "oversupply"),
"eq_price"   =
map_dbl(market_outcomes_pred, "eq_price"),
"LEM_price"  =
map_dbl(market_outcomes_pred, "LEM_price"))
# Extract supply, demand, and equilibrium prices per period
supply_predb  = map_dbl(market_outcomes_pred, "supply")
demand_pred   = map_dbl(market_outcomes_pred, "demand")
eq_price_pred = map_dbl(market_outcomes_pred, "eq_price")
# Plot oversupply, equilibrium and weighted average prices
ptitle = ggdraw() +
draw_label(captions[c],
size     = 16,
fontface = "bold")
p1 = data_pred %>%
ggplot() +
geom_line(aes(x = time, y = oversupply)) +
geom_hline(yintercept = 0, col = "red") +
ylab("Oversupply in kWh") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p2 = data_pred %>%
ggplot() +
geom_line(aes(x = time, y = eq_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("Equilibrium price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
p3 = data_pred %>%
ggplot() +
geom_line(aes(x = time, y = LEM_price)) +
geom_hline(yintercept = 12.31, col = "red") +
geom_hline(yintercept = 28.69, col = "red") +
ylab("LEM price in EURct") +
xlab("Timestamp") +
theme_classic(base_size = 10)
plot_grid(ptitle, p1, p2, p3, ncol = 1, rel_heights = c(0.15, 1, 1, 1))
ggsave("graphs/marketoutcome_pred"%&%i%&%".pdf",
height = 8.267, width = 11.692)
}
# Load packages
packages = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Source user-defined functions
functions = c("FUN_getTargets.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%"     = function(x, y) {paste(x, y, sep = "")}
# Specify paths to directories containing consumer and prosumer datasets
path_c    = "data/consumer/"
path_p    = "data/prosumer/"
files_p    = substring(list.files(path_p, pattern = "*.csv"),
1, 17)[c(19, 24, 26, 30, 31, 72, 75, 83, 84, 85, 86, 89)]
# Load net production data per 15-minute time interval
prod = matrix(NA, nrow = 8836, ncol = length(files_p))
i = 0
for(id in files_p) {
i = i+1
prod[, i] = getTargets(path_p,
id,
return = "production",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")
}
ids = substring(files_p, 15, 17)
## Plot energy production of all relevant prosumers in testing period
## Author: Michael Kostmann
# Load packages
packages = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Source user-defined functions
functions = c("FUN_getTargets.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%"     = function(x, y) {paste(x, y, sep = "")}
# Specify paths to directories containing consumer and prosumer datasets
path_c    = "data/consumer/"
path_p    = "data/prosumer/"
files_p    = substring(list.files(path_p, pattern = "*.csv"),
1, 17)[c(19, 24, 26, 30, 31, 72, 75, 83, 84, 85, 86, 89)]
# Load net production data per 15-minute time interval
prod = matrix(NA, nrow = 8836, ncol = length(files_p))
i = 0
for(id in files_p) {
i = i+1
prod[, i] = getTargets(path_p,
id,
return = "production",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")
}
# Vector of x-axis labels
ids = substring(files_p, 15, 17)
# Initiate list to save plots for plotting grid
plotgrids = list()
# Loop over specified producers
for(i in 1:length(files_p)){
p_title =  ggdraw() +
draw_label("Prosumer "%&%ids[i],
size     = 10,
fontface = "bold")
t = data.frame("time"   = seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
as.POSIXct("2018-01-01 00:00"),
by = 900)[1:nrow(prod)],
"value" = prod[, i])
p = ggplot(t, aes(x = time, y = value)) +
geom_line() +
scale_y_continuous(limits = c(0, max(prod))) +
ylab("kWh/15 minutes") +
xlab("Timestamp") +
theme_classic(base_size = 8)
plotgrids[[i]] = plot_grid(p_title, p, ncol = 1, rel_heights = c(0.1, 1))
}
plot_grid(plotlist = plotgrids, nrow = 4, ncol = 3)
ggsave("graphs/producers_all.pdf", height = 8.267, width = 11.692)
## end of file ##
## Calculate means  and medians of error measures and save as csv-file
## Author: Michael Kostmann
# Load packages
# packages  = c("cowplot")#, "IDPmisc")
# invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_loadErrorMeasures.R")
invisible(lapply(functions, source))
# Function for easy string pasting
"%&%"     = function(x, y) {paste(x, y, sep = "")}
# Define vector with names of error measures
measures        = c("MAE", "MAPE", "MASE", "MSE", "RMSE", "NRMSE")
measures_median = c("MAE", "MdAPE", "MASE", "MSE", "RMSE", "NRMdSE")
### Mean of error measures
## CONSUMER ##
# Define vector of datasets to exclude from error analysis
remove   = c(13, 21, 34, 45, 52, 56, 66, 75, 77, 79, 81)
# Load error measures
error_measures_c        = loadErrorMeasures("predictions/consumer/",
return = measures,
remove = remove)
error_measures_c_median = loadErrorMeasures("predictions/consumer_median/",
return = measures_median,
remove = remove)
# Generate dataframe for table
avg_errM_c_mean = data.frame(
"Model"  = c("LSTM",
"LASSO",
"Benchmark",
"Improvement LSTM (in %)",
"Improvement LASSO (in %)"),
"MAE"    = c(mean(error_measures_c[["LSTM_MAE"]]),
mean(error_measures_c[["LASSO_MAE"]]),
mean(error_measures_c[["naive_MAE"]]),
100*(mean(error_measures_c[["naive_MAE"]]) -
mean(error_measures_c[["LSTM_MAE"]])) /
mean(error_measures_c[["naive_MAE"]]),
100*(mean(error_measures_c[["naive_MAE"]]) -
mean(error_measures_c[["LASSO_MAE"]])) /
mean(error_measures_c[["naive_MAE"]])),
"RMSE"   = c(mean(error_measures_c[["LSTM_RMSE"]]),
mean(error_measures_c[["LASSO_RMSE"]]),
mean(error_measures_c[["naive_RMSE"]]),
100*(mean(error_measures_c[["naive_RMSE"]]) -
mean(error_measures_c[["LSTM_RMSE"]])) /
mean(error_measures_c[["naive_RMSE"]]),
100*(mean(error_measures_c[["naive_RMSE"]]) -
mean(error_measures_c[["LASSO_RMSE"]])) /
mean(error_measures_c[["naive_RMSE"]])),
"MAPE"   = c(mean(error_measures_c[["LSTM_MAPE"]]),
mean(error_measures_c[["LASSO_MAPE"]]),
mean(error_measures_c[["naive_MAPE"]]),
100*(mean(error_measures_c[["naive_MAPE"]]) -
mean(error_measures_c[["LSTM_MAPE"]])) /
mean(error_measures_c[["naive_MAPE"]]),
100*(mean(error_measures_c[["naive_MAPE"]]) -
mean(error_measures_c[["LASSO_MAPE"]])) /
mean(error_measures_c[["naive_MAPE"]])),
# "MdAPE"  = c(mean(error_measures_c_median[["LSTM_MdAPE"]]),
#
#              mean(error_measures_c_median[["LASSO_MdAPE"]]),
#
#              mean(error_measures_c_median[["naive_MdAPE"]]),
#
#              100*(mean(error_measures_c_median[["naive_MdAPE"]]) -
#                       mean(error_measures_c_median[["LSTM_MdAPE"]])) /
#                  mean(error_measures_c_median[["naive_MdAPE"]]),
#
#              100*(mean(error_measures_c_median[["naive_MdAPE"]]) -
#                       mean(error_measures_c_median[["LASSO_MdAPE"]])) /
#                  mean(error_measures_c_median[["naive_MdAPE"]])),
"NRMSE"  = c(mean(error_measures_c[["LSTM_NRMSE"]]),
mean(error_measures_c[["LASSO_NRMSE"]]),
mean(error_measures_c[["naive_NRMSE"]]),
100*(mean(error_measures_c[["naive_NRMSE"]]) -
mean(error_measures_c[["LSTM_NRMSE"]])) /
mean(error_measures_c[["naive_NRMSE"]]),
100*(mean(error_measures_c[["naive_NRMSE"]]) -
mean(error_measures_c[["LASSO_NRMSE"]])) /
mean(error_measures_c[["naive_NRMSE"]])),
# "NRMdSE" = c(mean(error_measures_c_median[["LSTM_NRMdSE"]]),
#
#              mean(error_measures_c_median[["LASSO_NRMdSE"]]),
#
#              mean(error_measures_c_median[["naive_NRMdSE"]]),
#
#              100*(mean(error_measures_c_median[["naive_NRMdSE"]]) -
#                       mean(error_measures_c_median[["LSTM_NRMdSE"]])) /
#                  mean(error_measures_c_median[["naive_NRMdSE"]]),
#
#              100*(mean(error_measures_c_median[["naive_NRMdSE"]]) -
#                       mean(error_measures_c_median[["LASSO_NRMdSE"]])) /
#                  mean(error_measures_c_median[["naive_NRMdSE"]])),
"MASE"   = c(mean(error_measures_c[["LSTM_MASE"]]),
mean(error_measures_c[["LASSO_MASE"]]),
mean(error_measures_c[["naive_MASE"]]),
100*(mean(error_measures_c[["naive_MASE"]]) -
mean(error_measures_c[["LSTM_MASE"]])) /
mean(error_measures_c[["naive_MASE"]]),
100*(mean(error_measures_c[["naive_MASE"]]) -
mean(error_measures_c[["LASSO_MASE"]])) /
mean(error_measures_c[["naive_MASE"]]))
)
# Save to file
write.csv(avg_errM_c_mean, file = "tables/avg_errorMeasures_c.csv")
# write.csv(avg_errM_c_mean, file = "tables/avg_errorMeasures_c_median.csv")
### PROSUMER ###
# Load error measures
error_measures_p = loadErrorMeasures("predictions/prosumer/",
return = measures,
remove = NULL)
# Generate dataframe for table
avg_errM_p_mean = data.frame(
"Model" = c("LSTM",
"LASSO",
"Benchmark",
"Improvement LSTM (in %)",
"Improvement LASSO (in %)"),
"MAE"   = c(mean(error_measures_p[["LSTM_MAE"]]),
mean(error_measures_p[["LASSO_MAE"]]),
mean(error_measures_p[["naive_MAE"]]),
100*(mean(error_measures_p[["naive_MAE"]]) -
mean(error_measures_p[["LSTM_MAE"]])) /
mean(error_measures_p[["naive_MAE"]]),
100*(mean(error_measures_p[["naive_MAE"]]) -
mean(error_measures_p[["LASSO_MAE"]])) /
mean(error_measures_p[["naive_MAE"]])),
"RMSE"  = c(mean(error_measures_p[["LSTM_RMSE"]]),
mean(error_measures_p[["LASSO_RMSE"]]),
mean(error_measures_p[["naive_RMSE"]]),
100*(mean(error_measures_p[["naive_RMSE"]]) -
mean(error_measures_p[["LSTM_RMSE"]])) /
mean(error_measures_p[["naive_RMSE"]]),
100*(mean(error_measures_p[["naive_RMSE"]]) -
mean(error_measures_p[["LASSO_RMSE"]])) /
mean(error_measures_p[["naive_RMSE"]])),
"MASE"  = c(mean(error_measures_p[["LSTM_MASE"]]),
mean(error_measures_p[["LASSO_MASE"]]),
mean(error_measures_p[["naive_MASE"]]),
100*(mean(error_measures_p[["naive_MASE"]]) -
mean(error_measures_p[["LSTM_MASE"]])) /
mean(error_measures_p[["naive_MASE"]]),
100*(mean(error_measures_p[["naive_MASE"]]) -
mean(error_measures_p[["LASSO_MASE"]])) /
mean(error_measures_p[["naive_MASE"]]))
)
# Save to file
write.csv(avg_errM_p_mean, file = "tables/avg_errorMeasures_p.csv")
### Median of error measures
###  CONSUMER  ###
# Generate dataframe for table
avg_errM_c_median = data.frame(
"Model"  = c("LSTM",
"LASSO",
"Benchmark",
"Improvement LSTM (in %)",
"Improvement LASSO (in %)"),
"MAE"    = c(median(error_measures_c[["LSTM_MAE"]]),
median(error_measures_c[["LASSO_MAE"]]),
median(error_measures_c[["naive_MAE"]]),
100*(median(error_measures_c[["naive_MAE"]]) -
median(error_measures_c[["LSTM_MAE"]])) /
median(error_measures_c[["naive_MAE"]]),
100*(median(error_measures_c[["naive_MAE"]]) -
median(error_measures_c[["LASSO_MAE"]])) /
median(error_measures_c[["naive_MAE"]])),
"RMSE"   = c(median(error_measures_c[["LSTM_RMSE"]]),
median(error_measures_c[["LASSO_RMSE"]]),
median(error_measures_c[["naive_RMSE"]]),
100*(median(error_measures_c[["naive_RMSE"]]) -
median(error_measures_c[["LSTM_RMSE"]])) /
median(error_measures_c[["naive_RMSE"]]),
100*(median(error_measures_c[["naive_RMSE"]]) -
median(error_measures_c[["LASSO_RMSE"]])) /
median(error_measures_c[["naive_RMSE"]])),
"MAPE"   = c(median(error_measures_c[["LSTM_MAPE"]]),
median(error_measures_c[["LASSO_MAPE"]]),
median(error_measures_c[["naive_MAPE"]]),
100*(median(error_measures_c[["naive_MAPE"]]) -
median(error_measures_c[["LSTM_MAPE"]])) /
median(error_measures_c[["naive_MAPE"]]),
100*(median(error_measures_c[["naive_MAPE"]]) -
median(error_measures_c[["LASSO_MAPE"]])) /
median(error_measures_c[["naive_MAPE"]])),
"NRMSE"  = c(median(error_measures_c[["LSTM_NRMSE"]]),
median(error_measures_c[["LASSO_NRMSE"]]),
median(error_measures_c[["naive_NRMSE"]]),
100*(median(error_measures_c[["naive_NRMSE"]]) -
median(error_measures_c[["LSTM_NRMSE"]])) /
median(error_measures_c[["naive_NRMSE"]]),
100*(median(error_measures_c[["naive_NRMSE"]]) -
median(error_measures_c[["LASSO_NRMSE"]])) /
median(error_measures_c[["naive_NRMSE"]])),
"MASE"   = c(median(error_measures_c[["LSTM_MASE"]]),
median(error_measures_c[["LASSO_MASE"]]),
median(error_measures_c[["naive_MASE"]]),
100*(median(error_measures_c[["naive_MASE"]]) -
median(error_measures_c[["LSTM_MASE"]])) /
median(error_measures_c[["naive_MASE"]]),
100*(median(error_measures_c[["naive_MASE"]]) -
median(error_measures_c[["LASSO_MASE"]])) /
median(error_measures_c[["naive_MASE"]]))
)
# Save to file
write.csv(avg_errM_c_median, file = "tables/median_errorMeasures_c.csv")
# write.csv(avg_errM_c_median, file = "tables/median_errorMeasures_c_median.csv")
### PROSUMER ###
# Load error measures
error_measures_p = loadErrorMeasures("predictions/prosumer/",
return = measures,
remove = NULL)
# Generate dataframe for table
avg_errM_p_median = data.frame(
"Model" = c("LSTM",
"LASSO",
"Benchmark",
"Improvement LSTM (in %)",
"Improvement LASSO (in %)"),
"MAE"   = c(median(error_measures_p[["LSTM_MAE"]]),
median(error_measures_p[["LASSO_MAE"]]),
median(error_measures_p[["naive_MAE"]]),
100*(median(error_measures_p[["naive_MAE"]]) -
median(error_measures_p[["LSTM_MAE"]])) /
median(error_measures_p[["naive_MAE"]]),
100*(median(error_measures_p[["naive_MAE"]]) -
median(error_measures_p[["LASSO_MAE"]])) /
median(error_measures_p[["naive_MAE"]])),
"RMSE"  = c(median(error_measures_p[["LSTM_RMSE"]]),
median(error_measures_p[["LASSO_RMSE"]]),
median(error_measures_p[["naive_RMSE"]]),
100*(median(error_measures_p[["naive_RMSE"]]) -
median(error_measures_p[["LSTM_RMSE"]])) /
median(error_measures_p[["naive_RMSE"]]),
100*(median(error_measures_p[["naive_RMSE"]]) -
median(error_measures_p[["LASSO_RMSE"]])) /
median(error_measures_p[["naive_RMSE"]])),
"MASE"  = c(median(error_measures_p[["LSTM_MASE"]]),
median(error_measures_p[["LASSO_MASE"]]),
median(error_measures_p[["naive_MASE"]]),
100*(median(error_measures_p[["naive_MASE"]]) -
median(error_measures_p[["LSTM_MASE"]])) /
median(error_measures_p[["naive_MASE"]]),
100*(median(error_measures_p[["naive_MASE"]]) -
median(error_measures_p[["LASSO_MASE"]])) /
median(error_measures_p[["naive_MASE"]]))
)
# Save to file
write.csv(avg_errM_p_median, file = "tables/median_errorMeasures_p.csv")
## end of file ##
