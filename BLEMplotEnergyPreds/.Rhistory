# Load user-defined functions
functions <- c("FUN_getTargets.R", "FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Load user-defined functions
functions <- c("FUN_getTargets.R")#, "FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Set parameters
path <- "data/consumer/"
files <- substring(list.files(path, pattern = ".csv"),
1,
17)[-c(13, 21, 26, 35, 46, 53, 57, 67, 75, 78, 80)]
# Load prediction dataset
predictions_LSTM_all  <- read.csv("output/consumer/LSTM_predictions.csv")[, -1]
# Load prediction dataset
predictions_LSTM_all  <- read.csv("predictions/consumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all <- read.csv("predictions/consumer/LASSO_predictions.csv")[, -1]
predictions_naive_all <- read.csv("predictions/consumer/naive_predictions.csv")[, -1]
# Set length of plotted time series
n <- min(nrow(predictions_LSTM_all),
nrow(predictions_LASSO_all),
nrow(predictions_naive_all))
# Initiate progress bar
pb <- txtProgressBar(min = 0, max = length(files), style = 3)
# Loop over all datasets in directory "path"
for(i in 1:length(files)){
# Get dataset ID
id <- files[i]
# Get true values
targets <- getTargets(path = path,
id = id,
return = "consumption",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, i]
predictions_LASSO <- predictions_LASSO_all[, i]
predictions_naive <- predictions_naive_all[, i]
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
as.POSIXct("2018-01-01 00:00"),
by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data, id.vars = "time")
# Plot
c <- substring(id, 15, 17)
p_title <- ggdraw() +
draw_label(paste0("Consumer "%&%c%&%": True and predicted consumption",
"in kWh per 15-minute interval"),
size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
labs(color = "Legend") +
ylab("Consumption in kWh per 15-minute interval")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/evaluation/timeseries/"%&%id%&%".pdf", height = 8.267, width = 11.692)
# Increase progress bar
setTxtProgressBar(pb, i)
}
# Initiate progress bar
pb <- txtProgressBar(min = 0, max = length(files), style = 3)
# Loop over all datasets in directory "path"
for(i in 1:length(files)){
# Get dataset ID
id <- files[i]
# Get true values
targets <- getTargets(path = path,
id = id,
return = "consumption",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, i]
predictions_LASSO <- predictions_LASSO_all[, i]
predictions_naive <- predictions_naive_all[, i]
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
as.POSIXct("2018-01-01 00:00"),
by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data, id.vars = "time")
# Plot
c <- substring(id, 15, 17)
p_title <- ggdraw() +
draw_label(paste0("Consumer "%&%c%&%": True and predicted consumption",
"in kWh per 15-minute interval"),
size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
labs(color = "Legend") +
ylab("Consumption in kWh per 15-minute interval")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/evaluation/timeseries/"%&%id%&%".pdf", height = 8.267, width = 11.692)
# Increase progress bar
setTxtProgressBar(pb, i)
}
# Load user-defined functions
packages <- c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions <- c("FUN_getTargets.R")#, "FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Set parameters
path <- "data/consumer/"
files <- substring(list.files(path, pattern = ".csv"),
1,
17)[-c(13, 21, 26, 35, 46, 53, 57, 67, 75, 78, 80)]
# Load prediction dataset
predictions_LSTM_all  <- read.csv("predictions/consumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all <- read.csv("predictions/consumer/LASSO_predictions.csv")[, -1]
predictions_naive_all <- read.csv("predictions/consumer/naive_predictions.csv")[, -1]
# Set length of plotted time series
n <- min(nrow(predictions_LSTM_all),
nrow(predictions_LASSO_all),
nrow(predictions_naive_all))
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, 19]
predictions_LASSO <- predictions_LASSO_all[, 19]
predictions_naive <- predictions_naive_all[, 19]
# Get true values
targets <- getTargets(path = path,
id = "prosumer-00000019",
return = "production",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:(test_steps*batch_size)]
# Set length of plotted time series
n <- min(length(predictions_LSTM),
length(predictions_LASSO),
length(predictions_naive),
length(targets))
# Load user-defined functions
packages <- c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions <- c("FUN_getTargets.R")#, "FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Load prediction dataset
predictions_LSTM_all  <- read.csv("predictions/consumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all <- read.csv("predictions/consumer/LASSO_predictions.csv")[, -1]
predictions_naive_all <- read.csv("predictions/consumer/naive_predictions.csv")[, -1]
# Set length of plotted time series
n <- min(nrow(predictions_LSTM_all),
nrow(predictions_LASSO_all),
nrow(predictions_naive_all))
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, 19]
predictions_LASSO <- predictions_LASSO_all[, 19]
predictions_naive <- predictions_naive_all[, 19]
# Get true values
targets <- getTargets(path = "data/consumer/",
id = "consumer-00000011",
return = "consumption",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# Set length of plotted time series
n <- min(length(predictions_LSTM),
length(predictions_LASSO),
length(predictions_naive),
length(targets))
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"), as.POSIXct("2018-01-01 00:00"), by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data[(26*24*4):(27*24*4), ], id.vars = "time")
p_title <- ggdraw() +
draw_label("Consumer 011: True and predicted consumption in kWh per 15-minute interval", size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
theme_classic(base_size = 12) +
labs(color = "Legend") +
scale_color_manual(values=c("black", "steelblue", "springgreen3", "red")) +
ylab("Consumption in kWh")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/c011_pred_cons.pdf", height = (8.267/2), width = 11.692)
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, 11]
predictions_LASSO <- predictions_LASSO_all[, 11]
predictions_naive <- predictions_naive_all[, 11]
# Get true values
targets <- getTargets(path = "data/consumer/",
id = "consumer-00000011",
return = "consumption",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"), as.POSIXct("2018-01-01 00:00"), by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data[(26*24*4):(27*24*4), ], id.vars = "time")
p_title <- ggdraw() +
draw_label("Consumer 011: True and predicted consumption in kWh per 15-minute interval", size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
theme_classic(base_size = 12) +
labs(color = "Legend") +
scale_color_manual(values=c("black", "steelblue", "springgreen3", "red")) +
ylab("Consumption in kWh")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/c011_pred_cons.pdf", height = (8.267/2), width = 11.692)
# Load prediction dataset
predictions_LSTM_all  <- read.csv("predictions/prosumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all <- read.csv("predictions/prosumer/LASSO_predictions.csv")[, -1]
predictions_naive_all <- read.csv("predictions/prosumer/naive_predictions.csv")[, -1]
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, 2]
predictions_LASSO <- predictions_LASSO_all[, 2]
predictions_naive <- predictions_naive_all[, 2]
# Get true values
targets <- getTargets(path = "data/prosumer/",
id = "producer-00000024",
return = "production",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"), as.POSIXct("2018-01-01 00:00"), by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data[(83*24*4):(84*24*4), ], id.vars = "time")
p_title <- ggdraw() +
draw_label("Prosumer 024: True and predicted production in kWh per 15-minute interval", size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
theme_classic(base_size = 12) +
labs(color = "Legend") +
scale_color_manual(values=c("black", "steelblue", "springgreen3", "red")) +
ylab("Consumption in kWh")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/p024_pred_prod.pdf", height = (8.267/2), width = 11.692)
## Plot true and predicted consumption values in testing period
# Load user-defined functions
packages <- c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions <- c("FUN_getTargets.R")#, "FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Set parameters
# files <- substring(list.files("data/consumer/", pattern = ".csv"),
#                    1,
#                    17)[-c(13, 21, 26, 35, 46, 53, 57, 67, 75, 78, 80)]
# Load prediction dataset
predictions_LSTM_all  <- read.csv("predictions/consumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all <- read.csv("predictions/consumer/LASSO_predictions.csv")[, -1]
predictions_naive_all <- read.csv("predictions/consumer/naive_predictions.csv")[, -1]
# Set length of plotted time series
n <- min(nrow(predictions_LSTM_all),
nrow(predictions_LASSO_all),
nrow(predictions_naive_all))
#
# ## Plot total prediction period for all data sets ##
#
#
# # Initiate progress bar
# pb <- txtProgressBar(min = 0, max = length(files), style = 3)
#
# # Loop over all datasets in directory "path"
# for(i in 1:length(files)){
#
#     # Get dataset ID
#     id <- files[i]
#
#     # Get true values
#     targets <- getTargets(path = path,
#                           id = id,
#                           return = "consumption",
#                           min = "2017-10-01 00:03",
#                           max = "2018-01-01 00:00")[1:n]
#
#     # Select according column of prediction datasets
#     predictions_LSTM  <- predictions_LSTM_all[, i]
#     predictions_LASSO <- predictions_LASSO_all[, i]
#     predictions_naive <- predictions_naive_all[, i]
#
#     # Bind timeseries to one dataframe
#     data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"),
#                                             as.POSIXct("2018-01-01 00:00"),
#                                             by = 900)[1:n],
#                        "true"  = targets[1:n],
#                        "naive" = predictions_naive[1:n],
#                        "LASSO" = predictions_LASSO[1:n],
#                        "LSTM"  = predictions_LSTM[1:n])
#
#     # Reshape data to long-format
#     data_long <- melt(data, id.vars = "time")
#
#     # Plot
#     c <- substring(id, 15, 17)
#     p_title <- ggdraw() +
#         draw_label(paste0("Consumer "%&%c%&%": True and predicted consumption",
#                           "in kWh per 15-minute interval"),
#                    size = 16,
#                    fontface = "bold")
#
#     p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
#         geom_line(aes(color = variable)) +
#         labs(color = "Legend") +
#         ylab("Consumption in kWh per 15-minute interval")+
#         xlab("Timestamp")
#
#     plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
#     ggsave("graphs/"%&%id%&%".pdf", height = 8.267, width = 11.692)
#
#     # Increase progress bar
#     setTxtProgressBar(pb, i)
# }
## Plot exemplary day of one dataset ##
###  CONSUMER  ###
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, 11]
predictions_LASSO <- predictions_LASSO_all[, 11]
predictions_naive <- predictions_naive_all[, 11]
# Get true values
targets <- getTargets(path = "data/consumer/",
id = "consumer-00000011",
return = "consumption",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# # Set length of plotted time series
# n <- min(length(predictions_LSTM),
#          length(predictions_LASSO),
#          length(predictions_naive),
#          length(targets))
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"), as.POSIXct("2018-01-01 00:00"), by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data[(26*24*4):(27*24*4), ], id.vars = "time")
# Plot
p_title <- ggdraw() +
draw_label("Consumer 011: True and predicted consumption in kWh per 15-minute interval", size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
theme_classic(base_size = 12) +
labs(color = "Legend") +
scale_color_manual(values=c("black", "steelblue", "springgreen3", "red")) +
ylab("Consumption in kWh")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/c011_pred_cons.pdf", height = (8.267/2), width = 11.692)
###  PROSUMER  ###
# Set parameters
# files <- substring(list.files("data/prosumer/", pattern = ".csv"),
#                    1,
#                    17)[c(19, 24, 26, 30, 31, 72,
#                          75,83, 84, 85, 86, 89)]
# Load prediction dataset
predictions_LSTM_all  <- read.csv("predictions/prosumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all <- read.csv("predictions/prosumer/LASSO_predictions.csv")[, -1]
predictions_naive_all <- read.csv("predictions/prosumer/naive_predictions.csv")[, -1]
# Select according column of prediction datasets
predictions_LSTM  <- predictions_LSTM_all[, 2]
predictions_LASSO <- predictions_LASSO_all[, 2]
predictions_naive <- predictions_naive_all[, 2]
# # Set length of plotted time series
# n <- min(length(predictions_LSTM),
#          length(predictions_LASSO),
#          length(predictions_naive))
# Get true values
targets <- getTargets(path = "data/prosumer/",
id = "producer-00000024",
return = "production",
min = "2017-10-01 00:03",
max = "2018-01-01 00:00")[1:n]
# Bind timeseries to one dataframe
data <- data.frame("time"  = seq.POSIXt(as.POSIXct("2017-10-01 00:00"), as.POSIXct("2018-01-01 00:00"), by = 900)[1:n],
"true"  = targets[1:n],
"naive" = predictions_naive[1:n],
"LASSO" = predictions_LASSO[1:n],
"LSTM"  = predictions_LSTM[1:n])
# Reshape data to long-format
data_long <- melt(data[(83*24*4):(84*24*4), ], id.vars = "time")
# Plot
p_title <- ggdraw() +
draw_label("Prosumer 024: True and predicted production in kWh per 15-minute interval", size = 16,
fontface = "bold")
p <- data_long %>% ggplot(aes(x = time, y = value, by = variable)) +
geom_line(aes(color = variable)) +
theme_classic(base_size = 12) +
labs(color = "Legend") +
scale_color_manual(values=c("black", "steelblue", "springgreen3", "red")) +
ylab("Consumption in kWh")+
xlab("Timestamp")
plot_grid(p_title, p, ncol = 1, rel_heights = c(0.15, 1))
ggsave("graphs/p024_pred_prod.pdf", height = (8.267/2), width = 11.692)
## end of file ##
# Load user-defined functions
packages  = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_getTargets.R")#, "FUN_calcErrorMeasure.R")
invisible(lapply(functions, source))
# Get true values
targets = getTargets(path    = "data/consumer/",
id     = "consumer-00000011",
return = "consumption",
min    = "2017-10-01 00:03",
max    = "2018-01-01 00:00")[1:n]
# Load prediction dataset
predictions_LSTM_all  =
read.csv("predictions/consumer/LSTM_predictions.csv")[, -1]
predictions_LASSO_all =
read.csv("predictions/consumer/LASSO_predictions.csv")[, -1]
predictions_naive_all =
read.csv("predictions/consumer/naive_predictions.csv")[, -1]
# Set length of plotted time series
n = min(nrow(predictions_LSTM_all),
nrow(predictions_LASSO_all),
nrow(predictions_naive_all))
# Select according column of prediction datasets
predictions_LSTM  = predictions_LSTM_all[, 11]
predictions_LASSO = predictions_LASSO_all[, 11]
predictions_naive = predictions_naive_all[, 11]
# Get true values
targets = getTargets(path    = "data/consumer/",
id     = "consumer-00000011",
return = "consumption",
min    = "2017-10-01 00:03",
max    = "2018-01-01 00:00")[1:n]
# Load packages
packages  = c("cowplot")
invisible(lapply(packages, library, character.only = TRUE))
# Load user-defined functions
functions = c("FUN_getTargets.R", "FUN_getData.R")
invisible(lapply(functions, source))
# Define vector of datasets to exclude from error analysis
remove   = c(13, 21, 34, 45, 52, 56, 66, 75, 77, 79, 81)
# Load prediction dataset
predictions_c_LSTM_all  = read.csv("predictions/consumer/LSTM_predictions.csv")[, -1]
predictions_c_LASSO_all = read.csv("predictions/consumer/LASSO_predictions.csv")[, -1]
predictions_c_naive_all =
read.csv("predictions/consumer/naive_predictions.csv")[, -1]
# Aggregate data to 15-min intervals and strip timestamps to get true values
targets = getData(path   = "data/consumer/",
data   = "all",
return = "consumption") %>%
filter_time("2017-10-01 00:03:00" ~ "2018-01-01 00:00:00") %>%
mutate(time_aggr =
collapse_index(index      = time,
period     = "15 minutely",
side       = "end",
start_date = as_datetime(min(time),
tz = "CET"))) %>%
select(-time) %>%
group_by(time_aggr) %>%
summarise_all(sum) %>%
select(-time_aggr)
# Load packages
packages  = c("cowplot", "tidyverse")
invisible(lapply(packages, library, character.only = TRUE))
# Aggregate data to 15-min intervals and strip timestamps to get true values
targets = getData(path   = "data/consumer/",
data   = "all",
return = "consumption") %>%
filter_time("2017-10-01 00:03:00" ~ "2018-01-01 00:00:00") %>%
mutate(time_aggr =
collapse_index(index      = time,
period     = "15 minutely",
side       = "end",
start_date = as_datetime(min(time),
tz = "CET"))) %>%
select(-time) %>%
group_by(time_aggr) %>%
summarise_all(sum) %>%
select(-time_aggr)
targets
# Aggregate data to 15-min intervals and strip timestamps to get true values
targets = getData(path   = "data/consumer/",
data   = "all",
return = "consumption") %>%
filter_time("2017-10-01 00:03:00" ~ "2018-01-01 00:00:00") %>%
mutate(time_aggr =
collapse_index(index      = time,
period     = "15 minutely",
side       = "end",
start_date = as_datetime(min(time),
tz = "CET"))) %>%
select(-time) %>%
group_by(time_aggr) %>%
summarise_all(sum) %>%
select(-time_aggr)
getData(path   = "data/consumer/",
data   = "all",
return = "consumption")
